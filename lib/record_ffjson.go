// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: lib/record.go

package lib

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *Record) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Record) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"__REALTIME_TIMESTAMP":`)
	fflib.WriteJsonString(buf, string(j.REALTIME_TIMESTAMP))
	buf.WriteString(`,"PRIORITY":`)
	fflib.WriteJsonString(buf, string(j.PRIORITY))
	buf.WriteString(`,"_HOSTNAME":`)
	fflib.WriteJsonString(buf, string(j.HOSTNAME))
	buf.WriteString(`,"SYSLOG_FACILITY":`)
	fflib.WriteJsonString(buf, string(j.SYSLOG_FACILITY))
	buf.WriteString(`,"SYSLOG_IDENTIFIER":`)
	fflib.WriteJsonString(buf, string(j.SYSLOG_IDENTIFIER))
	buf.WriteString(`,"SYSLOG_PID":`)
	fflib.WriteJsonString(buf, string(j.SYSLOG_PID))
	buf.WriteString(`,"_PID":`)
	fflib.WriteJsonString(buf, string(j.PID))
	buf.WriteString(`,"MESSAGE":`)
	fflib.WriteJsonString(buf, string(j.MESSAGE))
	buf.WriteString(`,"_SOURCE_REALTIME_TIMESTAMP":`)
	fflib.WriteJsonString(buf, string(j.SOURCE_REALTIME_TIMESTAMP))
	buf.WriteByte('}')
	return nil
}

const (
	ffjtRecordbase = iota
	ffjtRecordnosuchkey

	ffjtRecordREALTIME_TIMESTAMP

	ffjtRecordPRIORITY

	ffjtRecordHOSTNAME

	ffjtRecordSYSLOG_FACILITY

	ffjtRecordSYSLOG_IDENTIFIER

	ffjtRecordSYSLOG_PID

	ffjtRecordPID

	ffjtRecordMESSAGE

	ffjtRecordSOURCE_REALTIME_TIMESTAMP
)

var ffjKeyRecordREALTIME_TIMESTAMP = []byte("__REALTIME_TIMESTAMP")

var ffjKeyRecordPRIORITY = []byte("PRIORITY")

var ffjKeyRecordHOSTNAME = []byte("_HOSTNAME")

var ffjKeyRecordSYSLOG_FACILITY = []byte("SYSLOG_FACILITY")

var ffjKeyRecordSYSLOG_IDENTIFIER = []byte("SYSLOG_IDENTIFIER")

var ffjKeyRecordSYSLOG_PID = []byte("SYSLOG_PID")

var ffjKeyRecordPID = []byte("_PID")

var ffjKeyRecordMESSAGE = []byte("MESSAGE")

var ffjKeyRecordSOURCE_REALTIME_TIMESTAMP = []byte("_SOURCE_REALTIME_TIMESTAMP")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Record) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Record) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtRecordbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtRecordnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'M':

					if bytes.Equal(ffjKeyRecordMESSAGE, kn) {
						currentKey = ffjtRecordMESSAGE
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'P':

					if bytes.Equal(ffjKeyRecordPRIORITY, kn) {
						currentKey = ffjtRecordPRIORITY
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'S':

					if bytes.Equal(ffjKeyRecordSYSLOG_FACILITY, kn) {
						currentKey = ffjtRecordSYSLOG_FACILITY
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyRecordSYSLOG_IDENTIFIER, kn) {
						currentKey = ffjtRecordSYSLOG_IDENTIFIER
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyRecordSYSLOG_PID, kn) {
						currentKey = ffjtRecordSYSLOG_PID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case '_':

					if bytes.Equal(ffjKeyRecordREALTIME_TIMESTAMP, kn) {
						currentKey = ffjtRecordREALTIME_TIMESTAMP
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyRecordHOSTNAME, kn) {
						currentKey = ffjtRecordHOSTNAME
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyRecordPID, kn) {
						currentKey = ffjtRecordPID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyRecordSOURCE_REALTIME_TIMESTAMP, kn) {
						currentKey = ffjtRecordSOURCE_REALTIME_TIMESTAMP
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyRecordSOURCE_REALTIME_TIMESTAMP, kn) {
					currentKey = ffjtRecordSOURCE_REALTIME_TIMESTAMP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRecordMESSAGE, kn) {
					currentKey = ffjtRecordMESSAGE
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyRecordPID, kn) {
					currentKey = ffjtRecordPID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRecordSYSLOG_PID, kn) {
					currentKey = ffjtRecordSYSLOG_PID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRecordSYSLOG_IDENTIFIER, kn) {
					currentKey = ffjtRecordSYSLOG_IDENTIFIER
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRecordSYSLOG_FACILITY, kn) {
					currentKey = ffjtRecordSYSLOG_FACILITY
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRecordHOSTNAME, kn) {
					currentKey = ffjtRecordHOSTNAME
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyRecordPRIORITY, kn) {
					currentKey = ffjtRecordPRIORITY
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyRecordREALTIME_TIMESTAMP, kn) {
					currentKey = ffjtRecordREALTIME_TIMESTAMP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtRecordnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtRecordREALTIME_TIMESTAMP:
					goto handle_REALTIME_TIMESTAMP

				case ffjtRecordPRIORITY:
					goto handle_PRIORITY

				case ffjtRecordHOSTNAME:
					goto handle_HOSTNAME

				case ffjtRecordSYSLOG_FACILITY:
					goto handle_SYSLOG_FACILITY

				case ffjtRecordSYSLOG_IDENTIFIER:
					goto handle_SYSLOG_IDENTIFIER

				case ffjtRecordSYSLOG_PID:
					goto handle_SYSLOG_PID

				case ffjtRecordPID:
					goto handle_PID

				case ffjtRecordMESSAGE:
					goto handle_MESSAGE

				case ffjtRecordSOURCE_REALTIME_TIMESTAMP:
					goto handle_SOURCE_REALTIME_TIMESTAMP

				case ffjtRecordnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_REALTIME_TIMESTAMP:

	/* handler: j.REALTIME_TIMESTAMP type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.REALTIME_TIMESTAMP = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PRIORITY:

	/* handler: j.PRIORITY type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.PRIORITY = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_HOSTNAME:

	/* handler: j.HOSTNAME type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.HOSTNAME = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SYSLOG_FACILITY:

	/* handler: j.SYSLOG_FACILITY type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SYSLOG_FACILITY = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SYSLOG_IDENTIFIER:

	/* handler: j.SYSLOG_IDENTIFIER type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SYSLOG_IDENTIFIER = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SYSLOG_PID:

	/* handler: j.SYSLOG_PID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SYSLOG_PID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PID:

	/* handler: j.PID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.PID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MESSAGE:

	/* handler: j.MESSAGE type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.MESSAGE = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SOURCE_REALTIME_TIMESTAMP:

	/* handler: j.SOURCE_REALTIME_TIMESTAMP type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SOURCE_REALTIME_TIMESTAMP = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
